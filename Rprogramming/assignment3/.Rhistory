# library
# library
source('~/Carolina/R/Scripts/Honorarios.R', echo=TRUE)
currentBranch = 'SAO'
#SAO
hist(dt$LineItens[dt$Branch==currentBranch])
dtlm <- lm(Actual[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$Actual[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Optimizationof the entire data set
dtlm <- lm(New.Value.Simple[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Simple[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Optimization using ranges
dtlm <- lm(New.Value.Range[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Range[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
help.search("summary")
?summary
head(rownames(a),3)
a <- available.packages()
head(rownames(a),3)
View(a)
www.uol <- read.table("C:\\Users\\SAO-CA~1\\AppData\\Local\\Temp\\RtmpY9LpRo\\data84425481af0", quote="\"")
View(www.uol)
# read csv
dt <- read.csv("C:\\Users\\sao-carolinamo\\Documents\\Carolina\\R\\Data\\dataSource.csv")
currentBranch = 'SAO'
#SAO
hist(dt$LineItens[dt$Branch==currentBranch])
dtlm <- lm(Actual[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$Actual[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Summary
summary(dt$Actual[dt$Branch==currentBranch])
# Optimizationof the entire data set
dtlm <- lm(New.Value.Simple[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Simple[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Summary Optimization
summary(dt$New.Value.Simple[dt$Branch==currentBranch])
# Optimization using ranges
dtlm <- lm(New.Value.Range[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Range[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
#SAO
hist(dt$LineItens[dt$Branch==currentBranch])
dtlm <- lm(Actual[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$Actual[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
xyplot(dt$New.Value.Range~dt$LineItens|Branch, data=dt)
xyplot(dt$Actual~dt$LineItens|Branch, data=dt)
# library
library(lattice)
xyplot(dt$New.Value.Range~dt$LineItens|Branch, data=dt)
xyplot(dt$Actual~dt$LineItens|Branch, data=dt)
xyplot(dt$New.Value.Range~dt$LineItens|Branch, data=dt)
a <- available.packages()
head(rownames(a),3)
find.packages("KernSmooth")
library("KernSmooth")
# read csv
dt <- read.csv("C:\\Users\\sao-carolinamo\\Documents\\Carolina\\R\\Data\\dataSourceVCPJan2015.csv")
currentBranch = 'VCP'
#VCP
hist(dt$LineItens[dt$Branch==currentBranch])
dtlm <- lm(Actual[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$Actual[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Optimization using ranges
dtlm <- lm(New.Value.Range[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Range[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
#VCP
hist(dt$LineItens[dt$Branch==currentBranch])
dtlm <- lm(Actual[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$Actual[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Optimization using ranges
dtlm <- lm(New.Value.Range[Branch==currentBranch]~LineItens[Branch==currentBranch], data=dt)
dtlm$coefficients
plot(dt$New.Value.Range[dt$Branch==currentBranch]~dt$LineItens[dt$Branch==currentBranch])
abline(dtlm)
# Summary
summary(dt$Actual[dt$Branch==currentBranch])
# Summary Optimization using ranges
summary(dt$New.Value.Range[dt$Branch==currentBranch])
x <- C(-0.5, 0, 1, 1, 1.5)
y <- C(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "1")
x <- C(-0.5, 0, 1, 1, 1.5)
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "1")
plot(x, y, lwd = 3, frame = FALSE, type = "l")
qunif?
data <- read.csv("C:\\Users\\sao-carolinamo\\Documents\\Carolina\\R\\Data\\LanesCOB_AMD2014.csv", sep = ";")
data.anova <- aov(data$transit_time_hours ~ data$CARRIER + data$Lane)
summary(data.anova)
View(data)
data <- read.csv("C:\\Users\\sao-carolinamo\\Documents\\Carolina\\R\\Data\\LanesCOB_AMD2014VCP.csv", sep = ";")
data.anova <- aov(data$transit_time_hours ~ data$CARRIER + data$Lane)
summary(data.anova)
summary(data)
boxplot(data$transit_time_hours[data$Lane='MIA  - VCP '] ~ data$carrier[data$Lane='MIA  - VCP '])
boxplot(data$transit_time_hours[data$Lane=='MIA  - VCP '] ~ data$carrier[data$Lane=='MIA  - VCP '])
boxplot(data$transit_time_hours ~ data$carrier)
boxplot(data$transit_time_hours ~ data$CARRIER)
boxplot(data$transit_time_hours[data$Lane=='MIA  - VCP '] ~ data$CARRIER[data$Lane=='MIA  - VCP '])
summary(data.anova)
TukeyHSD(data.anova)
data.anova <- aov(data$transit_time_hours[data$Lane=='MIA  - VCP '] ~ data$CARRIER[data$Lane=='MIA  - VCP '])
summary(data.anova)
summary(data.anova)
TukeyHSD(data.anova)
boxplot(data$transit_time_hours[data$Lane=='MIA  - VCP '] ~ data$CARRIER[data$Lane=='MIA  - VCP '])
datafile <- read.csv("C:\\Users\\sao-carolinamo\\Documents\\Carolina\\R\\coursera\\hw1_data.csv")
datamatrix <- data.matrix(datafile)
ozone <- datamatrix[,1]
na_tot <- is.na(ozone)
ozone[na_tot]
subset1 <- datamatrix[,1] > 31
subset2 <- matrixsub1[,4] > 90
matrixsub2 <- matrixsub1[subset2,]
good <- complete.cases(matrixsub2)
matrixsub1 = datamatrix[subset1,]
subset2 <- matrixsub1[,4] > 90
matrixsub2 <- matrixsub1[subset2,]
good <- complete.cases(matrixsub2)
matrixsub3 <- matrixsub2[good,]
mean(matrixsub3[,2])
View(datamatrix)
View(datamatrix)
View(datamatrix)
subset3 <- datamatrix[,6] = 6
subset3 <- datamatrix[,6] == 6
matrixsub4
matrixsub4
matrixsub4 <- datamatrix[subset3,]
matrixsub4
View(matrixsub4)
View(datamatrix)
subset3 <- datamatrix[,5] == 6
matrixsub4 <- datamatrix[subset3,]
matrixsub4
mean(matrixsub4[,4])
subset4 <- datamatrix[,5] == 5
matrixsub5 <- datamatrix[subset4,]
View(matrixsub5)
max(matrixsub5[,1])
good <- complete.cases(matrixsub5)
matrixsub6 <- matrixsub5[good,]
View(matrixsub6)
max(matrixsub6[,1])
setwd("~/Carolina/R/coursera/Rprogramming/assignment3")
source("submitscript3.R")
submit()
source("submitscript3.R")
submit()
source("submitscript3.R")
submit()
